<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: bacs/external/contest.proto
// Date: 2015-11-19 11:44:45

namespace bacs\external\Contest {

    class Id extends \DrSlump\Protobuf\Message {

        /**  @var string */
        public $value = null;


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Contest.Id');

            // OPTIONAL STRING value = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "value";
            $f->type      = \DrSlump\Protobuf::TYPE_STRING;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <value> has a value
         *
         * @return boolean
         */
        public function hasvalue() {
            return $this->_has(1);
        }

        /**
         * Clear <value> value
         *
         * @return \bacs\external\Contest\Id
         */
        public function clearvalue() {
            return $this->_clear(1);
        }

        /**
         * Get <value> value
         *
         * @return string
         */
        public function getvalue() {
            return $this->_get(1);
        }

        /**
         * Set <value> value
         *
         * @param string $value
         * @return \bacs\external\Contest\Id
         */
        public function setvalue($value) {
            return $this->_set(1, $value);
        }
    }
}

namespace bacs\external\Contest {

    class IdList extends \DrSlump\Protobuf\Message {

        /**  @var \bacs\external\Contest\Id[]  */
        public $entry = [];


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Contest.IdList');

            // REPEATED MESSAGE entry = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "entry";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
            $f->reference = '\bacs\external\Contest\Id';
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <entry> has a value
         *
         * @return boolean
         */
        public function hasentry() {
            return $this->_has(1);
        }

        /**
         * Clear <entry> value
         *
         * @return \bacs\external\Contest\IdList
         */
        public function clearentry() {
            return $this->_clear(1);
        }

        /**
         * Get <entry> value
         *
         * @param int $idx
         * @return \bacs\external\Contest\Id
         */
        public function getentry($idx = null) {
            return $this->_get(1, $idx);
        }

        /**
         * Set <entry> value
         *
         * @param \bacs\external\Contest\Id $value
         * @return \bacs\external\Contest\IdList
         */
        public function setentry(\bacs\external\Contest\Id $value, $idx = null) {
            return $this->_set(1, $value, $idx);
        }

        /**
         * Get all elements of <entry>
         *
         * @return \bacs\external\Contest\Id[]
         */
        public function getentrylist() {
            return $this->_get(1);
        }

        /**
         * Add a new element to <entry>
         *
         * @param \bacs\external\Contest\Id $value
         * @return \bacs\external\Contest\IdList
         */
        public function addentry(\bacs\external\Contest\Id $value) {
            return $this->_add(1, $value);
        }
    }
}

namespace bacs\external\Contest {

    class Info extends \DrSlump\Protobuf\Message {

        /**  @var string */
        public $name = null;

        /**  @var string */
        public $description = null;


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Contest.Info');

            // OPTIONAL STRING name = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "name";
            $f->type      = \DrSlump\Protobuf::TYPE_STRING;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $descriptor->addField($f);

            // OPTIONAL STRING description = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 2;
            $f->name      = "description";
            $f->type      = \DrSlump\Protobuf::TYPE_STRING;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <name> has a value
         *
         * @return boolean
         */
        public function hasname() {
            return $this->_has(1);
        }

        /**
         * Clear <name> value
         *
         * @return \bacs\external\Contest\Info
         */
        public function clearname() {
            return $this->_clear(1);
        }

        /**
         * Get <name> value
         *
         * @return string
         */
        public function getname() {
            return $this->_get(1);
        }

        /**
         * Set <name> value
         *
         * @param string $value
         * @return \bacs\external\Contest\Info
         */
        public function setname($value) {
            return $this->_set(1, $value);
        }

        /**
         * Check if <description> has a value
         *
         * @return boolean
         */
        public function hasdescription() {
            return $this->_has(2);
        }

        /**
         * Clear <description> value
         *
         * @return \bacs\external\Contest\Info
         */
        public function cleardescription() {
            return $this->_clear(2);
        }

        /**
         * Get <description> value
         *
         * @return string
         */
        public function getdescription() {
            return $this->_get(2);
        }

        /**
         * Set <description> value
         *
         * @param string $value
         * @return \bacs\external\Contest\Info
         */
        public function setdescription($value) {
            return $this->_set(2, $value);
        }
    }
}

namespace bacs\external\Contest {

    class InfoEntry extends \DrSlump\Protobuf\Message {

        /**  @var string */
        public $key = null;

        /**  @var \bacs\external\Contest\Info */
        public $value = null;


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Contest.InfoEntry');

            // OPTIONAL STRING key = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "key";
            $f->type      = \DrSlump\Protobuf::TYPE_STRING;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $descriptor->addField($f);

            // OPTIONAL MESSAGE value = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 2;
            $f->name      = "value";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $f->reference = '\bacs\external\Contest\Info';
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <key> has a value
         *
         * @return boolean
         */
        public function haskey() {
            return $this->_has(1);
        }

        /**
         * Clear <key> value
         *
         * @return \bacs\external\Contest\InfoEntry
         */
        public function clearkey() {
            return $this->_clear(1);
        }

        /**
         * Get <key> value
         *
         * @return string
         */
        public function getkey() {
            return $this->_get(1);
        }

        /**
         * Set <key> value
         *
         * @param string $value
         * @return \bacs\external\Contest\InfoEntry
         */
        public function setkey($value) {
            return $this->_set(1, $value);
        }

        /**
         * Check if <value> has a value
         *
         * @return boolean
         */
        public function hasvalue() {
            return $this->_has(2);
        }

        /**
         * Clear <value> value
         *
         * @return \bacs\external\Contest\InfoEntry
         */
        public function clearvalue() {
            return $this->_clear(2);
        }

        /**
         * Get <value> value
         *
         * @return \bacs\external\Contest\Info
         */
        public function getvalue() {
            return $this->_get(2);
        }

        /**
         * Set <value> value
         *
         * @param \bacs\external\Contest\Info $value
         * @return \bacs\external\Contest\InfoEntry
         */
        public function setvalue(\bacs\external\Contest\Info $value) {
            return $this->_set(2, $value);
        }
    }
}

namespace bacs\external {

    class Contest extends \DrSlump\Protobuf\Message {

        /**  @var \bacs\external\Contest\Id */
        public $id = null;

        /**  @var \bacs\external\Contest\InfoEntry[]  */
        public $info = [];

        /**  @var \bacs\external\Problem[]  */
        public $problem = [];


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Contest');

            // OPTIONAL MESSAGE id = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "id";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $f->reference = '\bacs\external\Contest\Id';
            $descriptor->addField($f);

            // REPEATED MESSAGE info = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 2;
            $f->name      = "info";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
            $f->reference = '\bacs\external\Contest\InfoEntry';
            $descriptor->addField($f);

            // REPEATED MESSAGE problem = 3
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 3;
            $f->name      = "problem";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
            $f->reference = '\bacs\external\Problem';
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <id> has a value
         *
         * @return boolean
         */
        public function hasid() {
            return $this->_has(1);
        }

        /**
         * Clear <id> value
         *
         * @return \bacs\external\Contest
         */
        public function clearid() {
            return $this->_clear(1);
        }

        /**
         * Get <id> value
         *
         * @return \bacs\external\Contest\Id
         */
        public function getid() {
            return $this->_get(1);
        }

        /**
         * Set <id> value
         *
         * @param \bacs\external\Contest\Id $value
         * @return \bacs\external\Contest
         */
        public function setid(\bacs\external\Contest\Id $value) {
            return $this->_set(1, $value);
        }

        /**
         * Check if <info> has a value
         *
         * @return boolean
         */
        public function hasinfo() {
            return $this->_has(2);
        }

        /**
         * Clear <info> value
         *
         * @return \bacs\external\Contest
         */
        public function clearinfo() {
            return $this->_clear(2);
        }

        /**
         * Get <info> value
         *
         * @param int $idx
         * @return \bacs\external\Contest\InfoEntry
         */
        public function getinfo($idx = null) {
            return $this->_get(2, $idx);
        }

        /**
         * Set <info> value
         *
         * @param \bacs\external\Contest\InfoEntry $value
         * @return \bacs\external\Contest
         */
        public function setinfo(\bacs\external\Contest\InfoEntry $value, $idx = null) {
            return $this->_set(2, $value, $idx);
        }

        /**
         * Get all elements of <info>
         *
         * @return \bacs\external\Contest\InfoEntry[]
         */
        public function getinfolist() {
            return $this->_get(2);
        }

        /**
         * Add a new element to <info>
         *
         * @param \bacs\external\Contest\InfoEntry $value
         * @return \bacs\external\Contest
         */
        public function addinfo(\bacs\external\Contest\InfoEntry $value) {
            return $this->_add(2, $value);
        }

        /**
         * Check if <problem> has a value
         *
         * @return boolean
         */
        public function hasproblem() {
            return $this->_has(3);
        }

        /**
         * Clear <problem> value
         *
         * @return \bacs\external\Contest
         */
        public function clearproblem() {
            return $this->_clear(3);
        }

        /**
         * Get <problem> value
         *
         * @param int $idx
         * @return \bacs\external\Problem
         */
        public function getproblem($idx = null) {
            return $this->_get(3, $idx);
        }

        /**
         * Set <problem> value
         *
         * @param \bacs\external\Problem $value
         * @return \bacs\external\Contest
         */
        public function setproblem(\bacs\external\Problem $value, $idx = null) {
            return $this->_set(3, $value, $idx);
        }

        /**
         * Get all elements of <problem>
         *
         * @return \bacs\external\Problem[]
         */
        public function getproblemlist() {
            return $this->_get(3);
        }

        /**
         * Add a new element to <problem>
         *
         * @param \bacs\external\Problem $value
         * @return \bacs\external\Contest
         */
        public function addproblem(\bacs\external\Problem $value) {
            return $this->_add(3, $value);
        }
    }
}

namespace bacs\external {

    class ContestList extends \DrSlump\Protobuf\Message {

        /**  @var \bacs\external\Contest[]  */
        public $entry = [];


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.ContestList');

            // REPEATED MESSAGE entry = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "entry";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
            $f->reference = '\bacs\external\Contest';
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <entry> has a value
         *
         * @return boolean
         */
        public function hasentry() {
            return $this->_has(1);
        }

        /**
         * Clear <entry> value
         *
         * @return \bacs\external\ContestList
         */
        public function clearentry() {
            return $this->_clear(1);
        }

        /**
         * Get <entry> value
         *
         * @param int $idx
         * @return \bacs\external\Contest
         */
        public function getentry($idx = null) {
            return $this->_get(1, $idx);
        }

        /**
         * Set <entry> value
         *
         * @param \bacs\external\Contest $value
         * @return \bacs\external\ContestList
         */
        public function setentry(\bacs\external\Contest $value, $idx = null) {
            return $this->_set(1, $value, $idx);
        }

        /**
         * Get all elements of <entry>
         *
         * @return \bacs\external\Contest[]
         */
        public function getentrylist() {
            return $this->_get(1);
        }

        /**
         * Add a new element to <entry>
         *
         * @param \bacs\external\Contest $value
         * @return \bacs\external\ContestList
         */
        public function addentry(\bacs\external\Contest $value) {
            return $this->_add(1, $value);
        }
    }
}

namespace bacs\external\Problem {

    class Id extends \DrSlump\Protobuf\Message {

        /**  @var string */
        public $value = null;

        /**  @var \bacs\external\Contest\Id */
        public $contest = null;


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Problem.Id');

            // OPTIONAL STRING value = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "value";
            $f->type      = \DrSlump\Protobuf::TYPE_STRING;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $descriptor->addField($f);

            // OPTIONAL MESSAGE contest = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 2;
            $f->name      = "contest";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $f->reference = '\bacs\external\Contest\Id';
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <value> has a value
         *
         * @return boolean
         */
        public function hasvalue() {
            return $this->_has(1);
        }

        /**
         * Clear <value> value
         *
         * @return \bacs\external\Problem\Id
         */
        public function clearvalue() {
            return $this->_clear(1);
        }

        /**
         * Get <value> value
         *
         * @return string
         */
        public function getvalue() {
            return $this->_get(1);
        }

        /**
         * Set <value> value
         *
         * @param string $value
         * @return \bacs\external\Problem\Id
         */
        public function setvalue($value) {
            return $this->_set(1, $value);
        }

        /**
         * Check if <contest> has a value
         *
         * @return boolean
         */
        public function hascontest() {
            return $this->_has(2);
        }

        /**
         * Clear <contest> value
         *
         * @return \bacs\external\Problem\Id
         */
        public function clearcontest() {
            return $this->_clear(2);
        }

        /**
         * Get <contest> value
         *
         * @return \bacs\external\Contest\Id
         */
        public function getcontest() {
            return $this->_get(2);
        }

        /**
         * Set <contest> value
         *
         * @param \bacs\external\Contest\Id $value
         * @return \bacs\external\Problem\Id
         */
        public function setcontest(\bacs\external\Contest\Id $value) {
            return $this->_set(2, $value);
        }
    }
}

namespace bacs\external\Problem {

    class Info extends \DrSlump\Protobuf\Message {

        /**  @var string */
        public $name = null;


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Problem.Info');

            // OPTIONAL STRING name = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "name";
            $f->type      = \DrSlump\Protobuf::TYPE_STRING;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <name> has a value
         *
         * @return boolean
         */
        public function hasname() {
            return $this->_has(1);
        }

        /**
         * Clear <name> value
         *
         * @return \bacs\external\Problem\Info
         */
        public function clearname() {
            return $this->_clear(1);
        }

        /**
         * Get <name> value
         *
         * @return string
         */
        public function getname() {
            return $this->_get(1);
        }

        /**
         * Set <name> value
         *
         * @param string $value
         * @return \bacs\external\Problem\Info
         */
        public function setname($value) {
            return $this->_set(1, $value);
        }
    }
}

namespace bacs\external\Problem {

    class ResourceLimits extends \DrSlump\Protobuf\Message {

        /**  @var int */
        public $timelimitmillis = null;

        /**  @var int */
        public $memorylimitbytes = null;


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Problem.ResourceLimits');

            // OPTIONAL UINT64 time_limit_millis = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "time_limit_millis";
            $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $descriptor->addField($f);

            // OPTIONAL UINT64 memory_limit_bytes = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 2;
            $f->name      = "memory_limit_bytes";
            $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <time_limit_millis> has a value
         *
         * @return boolean
         */
        public function hastimelimitmillis() {
            return $this->_has(1);
        }

        /**
         * Clear <time_limit_millis> value
         *
         * @return \bacs\external\Problem\ResourceLimits
         */
        public function cleartimelimitmillis() {
            return $this->_clear(1);
        }

        /**
         * Get <time_limit_millis> value
         *
         * @return int
         */
        public function gettimelimitmillis() {
            return $this->_get(1);
        }

        /**
         * Set <time_limit_millis> value
         *
         * @param int $value
         * @return \bacs\external\Problem\ResourceLimits
         */
        public function settimelimitmillis($value) {
            return $this->_set(1, $value);
        }

        /**
         * Check if <memory_limit_bytes> has a value
         *
         * @return boolean
         */
        public function hasmemorylimitbytes() {
            return $this->_has(2);
        }

        /**
         * Clear <memory_limit_bytes> value
         *
         * @return \bacs\external\Problem\ResourceLimits
         */
        public function clearmemorylimitbytes() {
            return $this->_clear(2);
        }

        /**
         * Get <memory_limit_bytes> value
         *
         * @return int
         */
        public function getmemorylimitbytes() {
            return $this->_get(2);
        }

        /**
         * Set <memory_limit_bytes> value
         *
         * @param int $value
         * @return \bacs\external\Problem\ResourceLimits
         */
        public function setmemorylimitbytes($value) {
            return $this->_set(2, $value);
        }
    }
}

namespace bacs\external\Problem\Statement {

    class Version extends \DrSlump\Protobuf\Message {

        /**  @var string */
        public $language = null;

        /**  @var string */
        public $format = null;


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Problem.Statement.Version');

            // OPTIONAL STRING language = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "language";
            $f->type      = \DrSlump\Protobuf::TYPE_STRING;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $descriptor->addField($f);

            // OPTIONAL STRING format = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 2;
            $f->name      = "format";
            $f->type      = \DrSlump\Protobuf::TYPE_STRING;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <language> has a value
         *
         * @return boolean
         */
        public function haslanguage() {
            return $this->_has(1);
        }

        /**
         * Clear <language> value
         *
         * @return \bacs\external\Problem\Statement\Version
         */
        public function clearlanguage() {
            return $this->_clear(1);
        }

        /**
         * Get <language> value
         *
         * @return string
         */
        public function getlanguage() {
            return $this->_get(1);
        }

        /**
         * Set <language> value
         *
         * @param string $value
         * @return \bacs\external\Problem\Statement\Version
         */
        public function setlanguage($value) {
            return $this->_set(1, $value);
        }

        /**
         * Check if <format> has a value
         *
         * @return boolean
         */
        public function hasformat() {
            return $this->_has(2);
        }

        /**
         * Clear <format> value
         *
         * @return \bacs\external\Problem\Statement\Version
         */
        public function clearformat() {
            return $this->_clear(2);
        }

        /**
         * Get <format> value
         *
         * @return string
         */
        public function getformat() {
            return $this->_get(2);
        }

        /**
         * Set <format> value
         *
         * @param string $value
         * @return \bacs\external\Problem\Statement\Version
         */
        public function setformat($value) {
            return $this->_set(2, $value);
        }
    }
}

namespace bacs\external\Problem\Statement {

    class Request extends \DrSlump\Protobuf\Message {

        /**  @var \bacs\external\Problem\Id */
        public $problem = null;

        /**  @var \bacs\external\Problem\Statement\Version */
        public $version = null;


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Problem.Statement.Request');

            // OPTIONAL MESSAGE problem = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "problem";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $f->reference = '\bacs\external\Problem\Id';
            $descriptor->addField($f);

            // OPTIONAL MESSAGE version = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 2;
            $f->name      = "version";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $f->reference = '\bacs\external\Problem\Statement\Version';
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <problem> has a value
         *
         * @return boolean
         */
        public function hasproblem() {
            return $this->_has(1);
        }

        /**
         * Clear <problem> value
         *
         * @return \bacs\external\Problem\Statement\Request
         */
        public function clearproblem() {
            return $this->_clear(1);
        }

        /**
         * Get <problem> value
         *
         * @return \bacs\external\Problem\Id
         */
        public function getproblem() {
            return $this->_get(1);
        }

        /**
         * Set <problem> value
         *
         * @param \bacs\external\Problem\Id $value
         * @return \bacs\external\Problem\Statement\Request
         */
        public function setproblem(\bacs\external\Problem\Id $value) {
            return $this->_set(1, $value);
        }

        /**
         * Check if <version> has a value
         *
         * @return boolean
         */
        public function hasversion() {
            return $this->_has(2);
        }

        /**
         * Clear <version> value
         *
         * @return \bacs\external\Problem\Statement\Request
         */
        public function clearversion() {
            return $this->_clear(2);
        }

        /**
         * Get <version> value
         *
         * @return \bacs\external\Problem\Statement\Version
         */
        public function getversion() {
            return $this->_get(2);
        }

        /**
         * Set <version> value
         *
         * @param \bacs\external\Problem\Statement\Version $value
         * @return \bacs\external\Problem\Statement\Request
         */
        public function setversion(\bacs\external\Problem\Statement\Version $value) {
            return $this->_set(2, $value);
        }
    }
}

namespace bacs\external\Problem\Statement {

    class Url extends \DrSlump\Protobuf\Message {

        /**  @var string */
        public $value = null;


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Problem.Statement.Url');

            // OPTIONAL STRING value = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "value";
            $f->type      = \DrSlump\Protobuf::TYPE_STRING;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <value> has a value
         *
         * @return boolean
         */
        public function hasvalue() {
            return $this->_has(1);
        }

        /**
         * Clear <value> value
         *
         * @return \bacs\external\Problem\Statement\Url
         */
        public function clearvalue() {
            return $this->_clear(1);
        }

        /**
         * Get <value> value
         *
         * @return string
         */
        public function getvalue() {
            return $this->_get(1);
        }

        /**
         * Set <value> value
         *
         * @param string $value
         * @return \bacs\external\Problem\Statement\Url
         */
        public function setvalue($value) {
            return $this->_set(1, $value);
        }
    }
}

namespace bacs\external\Problem {

    class Statement extends \DrSlump\Protobuf\Message {

        /**  @var \bacs\external\Problem\Statement\Version[]  */
        public $version = [];


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Problem.Statement');

            // REPEATED MESSAGE version = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "version";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
            $f->reference = '\bacs\external\Problem\Statement\Version';
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <version> has a value
         *
         * @return boolean
         */
        public function hasversion() {
            return $this->_has(1);
        }

        /**
         * Clear <version> value
         *
         * @return \bacs\external\Problem\Statement
         */
        public function clearversion() {
            return $this->_clear(1);
        }

        /**
         * Get <version> value
         *
         * @param int $idx
         * @return \bacs\external\Problem\Statement\Version
         */
        public function getversion($idx = null) {
            return $this->_get(1, $idx);
        }

        /**
         * Set <version> value
         *
         * @param \bacs\external\Problem\Statement\Version $value
         * @return \bacs\external\Problem\Statement
         */
        public function setversion(\bacs\external\Problem\Statement\Version $value, $idx = null) {
            return $this->_set(1, $value, $idx);
        }

        /**
         * Get all elements of <version>
         *
         * @return \bacs\external\Problem\Statement\Version[]
         */
        public function getversionlist() {
            return $this->_get(1);
        }

        /**
         * Add a new element to <version>
         *
         * @param \bacs\external\Problem\Statement\Version $value
         * @return \bacs\external\Problem\Statement
         */
        public function addversion(\bacs\external\Problem\Statement\Version $value) {
            return $this->_add(1, $value);
        }
    }
}

namespace bacs\external\Problem {

    class InfoEntry extends \DrSlump\Protobuf\Message {

        /**  @var string */
        public $key = null;

        /**  @var \bacs\external\Problem\Info */
        public $value = null;


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Problem.InfoEntry');

            // OPTIONAL STRING key = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "key";
            $f->type      = \DrSlump\Protobuf::TYPE_STRING;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $descriptor->addField($f);

            // OPTIONAL MESSAGE value = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 2;
            $f->name      = "value";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $f->reference = '\bacs\external\Problem\Info';
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <key> has a value
         *
         * @return boolean
         */
        public function haskey() {
            return $this->_has(1);
        }

        /**
         * Clear <key> value
         *
         * @return \bacs\external\Problem\InfoEntry
         */
        public function clearkey() {
            return $this->_clear(1);
        }

        /**
         * Get <key> value
         *
         * @return string
         */
        public function getkey() {
            return $this->_get(1);
        }

        /**
         * Set <key> value
         *
         * @param string $value
         * @return \bacs\external\Problem\InfoEntry
         */
        public function setkey($value) {
            return $this->_set(1, $value);
        }

        /**
         * Check if <value> has a value
         *
         * @return boolean
         */
        public function hasvalue() {
            return $this->_has(2);
        }

        /**
         * Clear <value> value
         *
         * @return \bacs\external\Problem\InfoEntry
         */
        public function clearvalue() {
            return $this->_clear(2);
        }

        /**
         * Get <value> value
         *
         * @return \bacs\external\Problem\Info
         */
        public function getvalue() {
            return $this->_get(2);
        }

        /**
         * Set <value> value
         *
         * @param \bacs\external\Problem\Info $value
         * @return \bacs\external\Problem\InfoEntry
         */
        public function setvalue(\bacs\external\Problem\Info $value) {
            return $this->_set(2, $value);
        }
    }
}

namespace bacs\external {

    class Problem extends \DrSlump\Protobuf\Message {

        /**  @var \bacs\external\Problem\Id */
        public $id = null;

        /**  @var \bacs\external\Problem\InfoEntry[]  */
        public $info = [];

        /**  @var \bacs\external\Problem\ResourceLimits */
        public $resourcelimits = null;

        /**  @var \bacs\external\Problem\Statement */
        public $statement = null;


        /** @var \Closure[] */
        protected static $__extensions = [];

        public static function descriptor() {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Problem');

            // OPTIONAL MESSAGE id = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 1;
            $f->name      = "id";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $f->reference = '\bacs\external\Problem\Id';
            $descriptor->addField($f);

            // REPEATED MESSAGE info = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 2;
            $f->name      = "info";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
            $f->reference = '\bacs\external\Problem\InfoEntry';
            $descriptor->addField($f);

            // OPTIONAL MESSAGE resource_limits = 3
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 3;
            $f->name      = "resource_limits";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $f->reference = '\bacs\external\Problem\ResourceLimits';
            $descriptor->addField($f);

            // OPTIONAL MESSAGE statement = 4
            $f = new \DrSlump\Protobuf\Field();
            $f->number    = 4;
            $f->name      = "statement";
            $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
            $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
            $f->reference = '\bacs\external\Problem\Statement';
            $descriptor->addField($f);

            foreach (self::$extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if <id> has a value
         *
         * @return boolean
         */
        public function hasid() {
            return $this->_has(1);
        }

        /**
         * Clear <id> value
         *
         * @return \bacs\external\Problem
         */
        public function clearid() {
            return $this->_clear(1);
        }

        /**
         * Get <id> value
         *
         * @return \bacs\external\Problem\Id
         */
        public function getid() {
            return $this->_get(1);
        }

        /**
         * Set <id> value
         *
         * @param \bacs\external\Problem\Id $value
         * @return \bacs\external\Problem
         */
        public function setid(\bacs\external\Problem\Id $value) {
            return $this->_set(1, $value);
        }

        /**
         * Check if <info> has a value
         *
         * @return boolean
         */
        public function hasinfo() {
            return $this->_has(2);
        }

        /**
         * Clear <info> value
         *
         * @return \bacs\external\Problem
         */
        public function clearinfo() {
            return $this->_clear(2);
        }

        /**
         * Get <info> value
         *
         * @param int $idx
         * @return \bacs\external\Problem\InfoEntry
         */
        public function getinfo($idx = null) {
            return $this->_get(2, $idx);
        }

        /**
         * Set <info> value
         *
         * @param \bacs\external\Problem\InfoEntry $value
         * @return \bacs\external\Problem
         */
        public function setinfo(\bacs\external\Problem\InfoEntry $value, $idx = null) {
            return $this->_set(2, $value, $idx);
        }

        /**
         * Get all elements of <info>
         *
         * @return \bacs\external\Problem\InfoEntry[]
         */
        public function getinfolist() {
            return $this->_get(2);
        }

        /**
         * Add a new element to <info>
         *
         * @param \bacs\external\Problem\InfoEntry $value
         * @return \bacs\external\Problem
         */
        public function addinfo(\bacs\external\Problem\InfoEntry $value) {
            return $this->_add(2, $value);
        }

        /**
         * Check if <resource_limits> has a value
         *
         * @return boolean
         */
        public function hasresourcelimits() {
            return $this->_has(3);
        }

        /**
         * Clear <resource_limits> value
         *
         * @return \bacs\external\Problem
         */
        public function clearresourcelimits() {
            return $this->_clear(3);
        }

        /**
         * Get <resource_limits> value
         *
         * @return \bacs\external\Problem\ResourceLimits
         */
        public function getresourcelimits() {
            return $this->_get(3);
        }

        /**
         * Set <resource_limits> value
         *
         * @param \bacs\external\Problem\ResourceLimits $value
         * @return \bacs\external\Problem
         */
        public function setresourcelimits(\bacs\external\Problem\ResourceLimits $value) {
            return $this->_set(3, $value);
        }

        /**
         * Check if <statement> has a value
         *
         * @return boolean
         */
        public function hasstatement() {
            return $this->_has(4);
        }

        /**
         * Clear <statement> value
         *
         * @return \bacs\external\Problem
         */
        public function clearstatement() {
            return $this->_clear(4);
        }

        /**
         * Get <statement> value
         *
         * @return \bacs\external\Problem\Statement
         */
        public function getstatement() {
            return $this->_get(4);
        }

        /**
         * Set <statement> value
         *
         * @param \bacs\external\Problem\Statement $value
         * @return \bacs\external\Problem
         */
        public function setstatement(\bacs\external\Problem\Statement $value) {
            return $this->_set(4, $value);
        }
    }
}

